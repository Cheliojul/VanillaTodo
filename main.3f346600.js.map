{"version":3,"sources":["scripts/main.js"],"names":["window","localStorage","list","document","querySelector","addButtons","querySelectorAll","localTodos","JSON","parse","getItem","scopeCount","activeCount","completedCount","handleEdit","button","addEventListener","e","currentTextInput","target","offsetParent","nextElementSibling","hasAttribute","removeAttribute","setAttribute","getTodayDate","monthList","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","handleDelete","currentTodoKey","closest","getAttribute","filter","todo","id","forEach","element","remove","renderList","handleStatus","box","currentTodo","find","elements","isCompleted","handleTextInputs","inputElement","todoKey","targetInput","Number","text","value","createTodo","ListElement","createElement","class","innerHTML","date","append","length","className","map","singleTodo","reduce","acc","deleteButtons","statusCheckboxes","textInputs","editButtons","checkbox","input","setItem","stringify","todoTemplate","push"],"mappings":"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","file":"main.3f346600.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst { localStorage } = window;\nconst list = document.querySelector('.Todo-board');\nconst addButtons = document.querySelectorAll('.plus__container, .button');\nlet localTodos = JSON.parse(localStorage.getItem('todos'));\nconst scopeCount = document.querySelector('.counter__scope');\nconst activeCount = document.querySelector('.counter__active');\nconst completedCount = document.querySelector('.counter__completed');\n\nrenderList();\n\naddButtons.forEach(button => {\n  button.addEventListener('click', () => {\n    const elements = document.querySelectorAll('.Todo-board__todo');\n    const todoTemplate = {\n      id: 0,\n      date: getTodayDate(),\n      text: '',\n      isCompleted: false,\n    };\n\n    if (!localTodos.length) {\n      localTodos.push(todoTemplate);\n    } else {\n      todoTemplate.id = localTodos[localTodos.length - 1].id + 1;\n      localTodos.push(todoTemplate);\n    }\n\n    elements.forEach(element => element.remove());\n    renderList();\n  });\n});\n\nfunction handleEdit(button) {\n  button.addEventListener('click', (e) => {\n    const currentTextInput = e.target.offsetParent.nextElementSibling;\n\n    if (currentTextInput.hasAttribute(`disabled`)) {\n      currentTextInput.removeAttribute(`disabled`);\n    } else {\n      currentTextInput.setAttribute(`disabled`, `disabled`);\n    }\n  });\n}\n\nfunction getTodayDate() {\n  const monthList = ['Jan', 'Feb', 'Mar', 'Apr',\n    'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const today = new Date();\n  const dd = String(today.getDate()).padStart(2, '0');\n  const mm = String(today.getMonth());\n  const yyyy = today.getFullYear();\n\n  return dd + ' ' + monthList[mm] + ' ' + yyyy;\n}\n\nfunction handleDelete(button) {\n  button.addEventListener('click', (e) => {\n    const currentTodoKey = e.target.closest('div[key]').getAttribute('key');\n\n    localTodos = localTodos.filter(todo =>\n      todo.id !== +currentTodoKey);\n\n    const elements = document.querySelectorAll('.Todo-board__todo');\n\n    elements.forEach(element => element.remove());\n    renderList();\n  });\n};\n\nfunction handleStatus(box) {\n  box.addEventListener('click', (e) => {\n    const currentTodoKey = e.target.closest('div[key]').getAttribute('key');\n    const currentTodo = localTodos.find(todo => todo.id === +currentTodoKey);\n    const elements = document.querySelectorAll('.Todo-board__todo');\n\n    currentTodo.isCompleted = !currentTodo.isCompleted;\n    elements.forEach(element => element.remove());\n    renderList();\n  });\n}\n\nfunction handleTextInputs(inputElement) {\n  inputElement.addEventListener('focusout', (e) => {\n    const todoKey = e.target.closest('div[key]').getAttribute('key');\n    const targetInput = localTodos.find(todo => todo.id === Number(todoKey));\n    const elements = document.querySelectorAll('.Todo-board__todo');\n\n    targetInput.text = e.target.value;\n    elements.forEach(element => element.remove());\n    renderList();\n  });\n}\n\nfunction createTodo(todo) {\n  const ListElement = document.createElement('li');\n\n  ListElement.class = 'Todo-board__Todo';\n\n  ListElement.innerHTML = `\n  <div key=\"${todo.id}\" class=\"Todo-board__todo\">\n    \n    <span class=\"Todo-board__heading\">\n      <input\n        type=\"checkbox\"\n        id=\"status-${todo.id}\"\n        name=\"status\"\n        ${todo.isCompleted ? `checked=\"${todo.isCompleted}\"` : ``}\n        class=\"Todo-board__status custom-checkbox\"\n      >\n      <label for=\"status-${todo.id}\"></label>\n      <span class=\"Todo-board__date\">${todo.date}</span>\n      <div class=\"Todo-board__edit\"> </div>\n      <div class=\"Todo-board__delete\"> </div>\n    </span>\n    \n    \n    <textarea\n      id=\"Text\"\n      ${todo.isCompleted ? `style=\"text-decoration:line-through;\"` : ``}\n      class=\"Todo-board__text\"\n      placeholder=\"Please enter task description\"\n      required\n      min=\"1\"\n      max=\"256\"\n      disabled\n    >${todo.text}</textarea>\n  </div>`;\n  list.append(ListElement);\n};\n\nfunction renderList() {\n  if (localTodos === null) {\n    localTodos = [];\n  }\n\n  if ((localTodos.length < 1)) {\n    const element = document.createElement('div');\n\n    element.className = `Todo-board__empty`;\n    element.innerHTML = `Create new task by clicking the button below`;\n    list.append(element);\n  } else {\n    if (document.querySelector('.Todo-board__empty')) {\n      document.querySelector('.Todo-board__empty').remove();\n    }\n  }\n\n  localTodos.map(singleTodo => createTodo(singleTodo));\n\n  completedCount.innerHTML = localTodos\n    .reduce((acc, todo) => {\n      if (todo.isCompleted) {\n        return acc + 1;\n      }\n\n      return acc;\n    }, 0);\n  scopeCount.innerHTML = localTodos.length;\n  activeCount.innerHTML = localTodos.length - completedCount.innerHTML;\n\n  const deleteButtons = document.querySelectorAll('.Todo-board__delete');\n  const statusCheckboxes = document.querySelectorAll('.Todo-board__status');\n  const textInputs = document.querySelectorAll('.Todo-board__text');\n  const editButtons = document.querySelectorAll('.Todo-board__edit');\n\n  deleteButtons.forEach(button => handleDelete(button));\n  statusCheckboxes.forEach(checkbox => handleStatus(checkbox));\n  textInputs.forEach(input => handleTextInputs(input));\n  editButtons.forEach(button => handleEdit(button));\n\n  localStorage.setItem('todos', JSON.stringify(localTodos));\n}\n"]}